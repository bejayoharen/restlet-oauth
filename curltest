#!/bin/bash -v

##########
#
# functions
#
##########

function die {
	echo $@
	exit 1
}
RESPONSE_CODE=
REDIRECT_LOCATION=
function PARSE {
	RESPONSE_CODE=`cat tmp | grep '^HTTP/1.1' | cut -f2 -d' '`
	[ "$RESPONSE_CODE" = "" ] && die "no response code"
	if [ "$RESPONSE_CODE" = "307" ]
	then
		REDIRECT_LOCATION=`cat tmp | grep '^Location: ' | sed 's,^Location: ,,' | tr -d '[:cntrl:]'`
	else
		REDIRECT_LOCATION=
	fi
}

##########
#
# data
#
##########
user=guest
pass=1234
clientId=CLIENT_ID
clientSecret=CLIENT_SECRET

# --------- access the protected resource:
curl -i "http://localhost:8080/protected/data" > tmp
PARSE
echo $RESPONSE_CODE
#[ "$RESPONSE_CODE" = "307" ] || die "should have been redirected. $RESPONSE_CODE"
echo $REDIRECT_LOCATION
#[ "`echo $REDIRECT_LOCATION | grep ^http://localhost:8080/authorize`"  = "" ] && die "redirected to unexpected location: $REDIRECT_LOCATION"

# ---- log on:
#FIXME: should be using digest auth
curl -i --basic --user ${user}:${pass} "http://localhost:8080/oauth/authorize?client_id=${clientId}&client_secret=${clientSecret}&redirect_uri=http://localhost:8080/protected/data&scope=AnOAuthScope&response_type=token" > tmp
cat tmp
PARSE
# verify that we got a 307:
[ "$RESPONSE_CODE" = "307" ] || die "should have been redirected. $RESPONSE_CODE"

# retrieve the access token from the redirect:
token=`echo $REDIRECT_LOCATION | sed 's,^.*=,,' | sed 's,$,,'`
echo $REDIRECT_LOCATION
echo $token

# --------- access the protected resource:
#curl --basic --user ${user}:${pass} -i -L "http://localhost:8080/protected/data?access_token=$token" > tmp
curl -i "http://localhost:8080/protected/data?access_token=$token" > tmp
cat tmp
PARSE
echo $RESPONSE_CODE
